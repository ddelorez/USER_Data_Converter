{
  "project": {
    "name": "Access Control Data Migration Framework",
    "description": "A web app to convert data between four access control systems (Avigilon Unity Access, Verkada Access, Avigilon Alta Access, Acre Access), with any system as source or destination, supporting CSV and API integrations, multiple input formats, AI-driven mapping with UI-prompted API keys, emphasizing data safety/security, optimized for Python/Go with Kilo Code, for local macOS/Proxmox development with sample and docs directories, using verified libraries and full code documentation.",
    "requirements": {
      "functional": [
        "Dropdowns to select any of four systems (Avigilon Unity Access, Verkada Access, Avigilon Alta Access, Acre Access) as source or destination",
        "Support data categories: cardholder/card data, access groupings, door configurations, schedules",
        "Upload and parse CSV, RTF, Excel, PDF, SQL backup files with system-specific CSV output using /samples",
        "Support API imports/exports for all four systems, with Kilo Code prompting for platform-specific endpoints/fields",
        "Manual and AI-driven field mapping with UI-prompted API keys and encrypted config storage in /config",
        "Review interface for AI-driven data changes",
        "Generate system-specific CSV output or API payloads, stored in /output",
        "Preview and edit mappings with system-specific validation",
        "Detailed error logging for invalid data",
        "Batch processing for multiple files or API requests",
        "Admin interface for mapping updates, API endpoints, and API key management",
        "Include /samples for sample documents, /docs for system-specific rules, PLANNING.md for project vision, and TASK.md for task tracking"
      ],
      "non_functional": [
        "Handle 10 concurrent users locally with future cloud scaling",
        "Process 10,000 records or 2GB files in <3 minutes",
        "Encrypt data with TLS 1.3 and AES-256, comply with GDPR/CCPA and ISO 27001",
        "Zero-trust architecture with role-based access and audit logs",
        "Secure API key storage in encrypted config files",
        "Support 60% manual and 40% automated testing (unit/integration in /tests for edge cases)",
        "Intuitive UI for technical integrators with secure workflows",
        "Compatible with Kilo Code extension (JSON/Markdown output, Python/Go focus)",
        "99.9% uptime locally with robust error handling",
        "Local macOS development, Proxmox test deployments with Proxmox MCP",
        "Use verified libraries (pandas==2.2.*, PyPDF2==3.0.*, langchain==0.3.*, Gin==1.9.*, GORM==1.25.*), prompt for API details, prevent LLM hallucinations, fully document code with docstrings, comments, and /docs"
      ]
    },
    "architecture": {
      "type": "client-server with modular services",
      "components": [
        {"name": "Frontend", "tech": "React, Tailwind CSS"},
        {"name": "Backend API", "tech": "Go, Gin"},
        {"name": "File Processor", "tech": "Python, pandas, PyPDF2, pyodbc"},
        {"name": "AI Service", "tech": "Python, langchain, user-provided AI APIs"},
        {"name": "Database", "tech": "PostgreSQL"},
        {"name": "Storage", "tech": "Local filesystem, AES-256"},
        {"name": "Auth", "tech": "Keycloak"},
        {"name": "Orchestration", "tech": "Proxmox LXC/VM, Proxmox MCP"},
        {"name": "Security Layer", "tech": "Nginx, Python cryptography"}
      ],
      "data_flow": "Browser -> React UI -> Go API -> Local Storage (/samples, /data, /output)/Python/AI/PostgreSQL -> Local Storage/API -> Browser",
      "scalability": "10 users locally, stateless for future cloud",
      "security": "TLS 1.3, AES-256, zero-trust, GDPR/CCPA, ISO 27001, audit logs",
      "testing": "60% manual (sample documents, conversion), 40% automated (unit/integration in /tests)",
      "project_structure": ["/src", "/samples", "/docs", "/data", "/output", "/config", "/tests", "PLANNING.md", "TASK.md", "README.md"],
      "llm_rules": [
        "Use verified libraries (pandas==2.2.*, PyPDF2==3.0.*, langchain==0.3.*, Gin==1.9.*, GORM==1.25.*)",
        "Prompt for platform-specific API endpoints/fields during code generation",
        "Validate API implementations against provided snippets",
        "Keep files <500 lines, split into modules",
        "Generate Google-style docstrings, inline comments, and /docs markdown for system rules",
        "Prevent hallucinations by cross-referencing verified sources",
        "Update PLANNING.md, TASK.md, README.md after changes",
        "Create pytest unit tests for new functions (success, edge case, failure) in /tests"
      ]
    },
    "tech_stack": {
      "frontend": ["React", "Tailwind CSS", "Axios"],
      "backend_api": ["Go", "Gin", "GORM"],
      "file_processor": ["Python", "pandas==2.2.*", "PyPDF2==3.0.*", "pyodbc"],
      "ai_service": ["Python", "langchain==0.3.*", "FastAPI"],
      "database": ["PostgreSQL"],
      "storage": ["Local filesystem", "Python cryptography"],
      "auth": ["Keycloak"],
      "orchestration": ["Proxmox LXC/VM", "Proxmox MCP"],
      "security": ["Nginx", "Python cryptography"],
      "devops": ["GitHub"],
      "testing": ["Pytest", "Go testing"],
      "documentation": ["Google-style docstrings", "/docs markdown"]
    },
    "workflow": {
      "timeline": "4 months, flexible for spare-time development and rapid prototyping",
      "phases": [
        {
          "month": 1,
          "tasks": [
            "Initialize GitHub repo, configure Kilo Code on macOS",
            "Create project structure (/src, /samples, /docs, /data, /output, /config, /tests, PLANNING.md, TASK.md, README.md) via Kilo Code architect mode",
            "Set up Proxmox LXC containers (React, Go, Python, PostgreSQL) via Proxmox MCP",
            "Develop React UI with Kilo Code LLM, using verified libraries",
            "Add docstrings, comments, update README.md, PLANNING.md, TASK.md",
            "Manual test UI on macOS, debug LLM-generated code"
          ]
        },
        {
          "month": 2,
          "tasks": [
            "Build Go API (Gin, GORM) for file uploads, metadata, API integrations, prompting for endpoints",
            "Implement Python file processor (pandas, PyPDF2, pyodbc), fully documented",
            "Add unit tests (Go testing, pytest) for parsing and API logic",
            "Deploy test instance to Proxmox LXC, validate parsing, debug issues",
            "Update TASK.md with completed tasks and discoveries"
          ]
        },
        {
          "month": 3,
          "tasks": [
            "Develop Python AI service (FastAPI, langchain) for field mapping with UI-prompted API keys",
            "Implement encrypted config files in /config (Python cryptography)",
            "Complete API integrations using snippets, prompting for details",
            "Add integration tests for API endpoints (header mismatches, errors)",
            "Test mappings on Proxmox with /samples, debug AI accuracy, document rules in /docs",
            "Update README.md, PLANNING.md, TASK.md"
          ]
        },
        {
          "month": 4,
          "tasks": [
            "Add Keycloak authentication, Nginx TLS 1.3, fully documented",
            "Conduct 60% manual testing with /samples and pending conversion, 40% automated testing for edge cases",
            "Debug and troubleshoot LLM-generated code, ensuring no hallucinations",
            "Finalize JSON artifact for Kilo Code, document setup in /docs",
            "Update TASK.md, plan Linode migration"
          ]
        }
      ],
      "testing": {
        "balance": "60% manual, 40% automated",
        "manual": "Validate outputs with /samples and pending conversion",
        "automated": "Unit tests (Go testing, pytest), integration tests (header mismatches, API errors, edge cases) in /tests",
        "test_cases": [
          "Header mismatches (e.g., Verkada user_id vs. Avigilon ExternalSystemID)",
          "API errors (e.g., rate limits, invalid tokens)",
          "Edge cases (e.g., missing fields, large SQL backups)",
          "AI accuracy (e.g., deduplication, mapping suggestions)"
        ]
      },
      "llm_rules": [
        "Use verified libraries with pinned versions",
        "Prompt for API details during code generation",
        "Validate API calls against snippets",
        "Keep files <500 lines, modular structure",
        "Generate docstrings, comments, /docs markdown",
        "Prevent hallucinations via verified sources",
        "Update PLANNING.md, TASK.md, README.md",
        "Create pytest unit tests for new functions"
      ]
    }
  }
}